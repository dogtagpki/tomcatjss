name: Sonarcloud-Pull
on:
  workflow_run:
    workflows: ["Code Analysis"]
    types:
      - completed

jobs:
  retrieve-pr:
    if: github.event.workflow_run.event == 'pull_request' && github.event.workflow_run.conclusion == 'success'
    runs-on: ubuntu-latest
    outputs:
      pr-number: ${{ steps.pr-artifact-script.outputs.result }}
      pr-base: ${{ steps.pr-base-script.outputs.result }}
    steps:
      - name: 'Download PR artifact'
        uses: actions/github-script@v3.1.0
        id: download-pr
        with:
          result-encoding: string
          script: |
            var artifacts = await github.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.payload.workflow_run.id,
            });
            var matchArtifact = artifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "pr"
            })[0];
            if (matchArtifact == null){
              core.setFailed("No PR artifact");
              return "False";
            }
            var download = await github.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: matchArtifact.id,
              archive_format: 'zip',
            });
            var fs = require('fs');
            fs.writeFileSync('${{github.workspace}}/pr.zip', Buffer.from(download.data));
            return "True";

      - name: Unzip the pr
        if: steps.download-pr.outputs.result == 'True'
        run: unzip pr.zip

      - name: Retrieve the pr number
        if: success()
        id: pr-artifact-script
        uses: actions/github-script@v3.1.0
        with:
          result-encoding: string
          script: |
            var fs = require('fs');
            var pr_number = Number(fs.readFileSync('./NR'));
            return pr_number;

      - name: Retrieve the pr base
        if: success()
        id: pr-base-script
        uses: actions/github-script@v3.1.0
        with:
          result-encoding: string
          script: |
            var fs = require('fs');
            var pr_base = fs.readFileSync('./BaseBranch');
            return pr_base;

  init:
    name: Initializing Workflow
    runs-on: ubuntu-latest
    needs: retrieve-pr
    outputs:
      matrix: ${{ steps.init.outputs.matrix }}
      repo: ${{ steps.init.outputs.repo }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Initialize workflow
        id: init
        env:
          BASE64_MATRIX: ${{ secrets.BASE64_MATRIX }}
          BASE64_REPO: ${{ secrets.BASE64_REPO }}
        run: |
          tests/bin/init-workflow.sh

  build:
    name: Building TomcatJSS
    needs: [init, retrieve-pr]
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    steps:
      - name: Clone the repository
        uses: actions/checkout@v2
        with:
          repository: ${{ github.event.workflow_run.head_repository.full_name }}
          ref: ${{ github.event.workflow_run.head_branch }}
          fetch-depth: 0

      - name: Rebase to master
        run: |
          git config user.name "GitHub Workflow Action"
          git remote add tomcatjss ${{ github.event.repository.clone_url }} 
          git fetch tomcatjss
          git rebase tomcatjss/${{ needs.retrieve-pr.outputs.pr-base }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build runner image
        uses: docker/build-push-action@v2
        with:
          context: .
          build-args: |
            OS_VERSION=${{ matrix.os }}
            COPR_REPO=${{ needs.init.outputs.repo }}
            BUILD_OPTS=--with-timestamp --with-commit-id
          tags: tomcatjss-runner
          target: tomcatjss-runner
          outputs: type=docker,dest=sonar-runner.tar

      - name: Store runner image
        uses: actions/cache@v3
        with:
          key: sonar-runner-${{ matrix.os }}-${{ github.event.workflow_run.id }}
          path: sonar-runner.tar

  sonarcloud:
    name: SonarCloud
    needs: [retrieve-pr, init, build]
    if: needs.retrieve-pr.outputs.pr-number != ''
    runs-on: ubuntu-latest
    env:
      SHARED: /tmp/workdir/ldapjdk
    strategy:
      matrix: ${{ fromJSON(needs.init.outputs.matrix) }}
    steps:
      - name: Retrieve runner image
        uses: actions/cache@v3
        with:
          key: sonar-runner-${{ matrix.os }}-${{ github.event.workflow_run.id }}
          path: sonar-runner.tar

      - name: Load runner image
        run: docker load --input sonar-runner.tar

      - name: Clone the repository
        uses: actions/checkout@v2
        with:
          repository: ${{ github.event.workflow_run.head_repository.full_name }}
          ref: ${{ github.event.workflow_run.head_branch }}
          fetch-depth: 0

      - name: Rebase to master
        run: |
          git config user.name "GitHub Workflow Action"
          git remote add tomcatjss ${{ github.event.repository.clone_url }} 
          git fetch tomcatjss
          git rebase tomcatjss/${{ needs.retrieve-pr.outputs.pr-base }}

      - name: Run container
        run: |
          IMAGE=tomcatjss-runner \
          NAME=pki \
          tests/bin/runner-init.sh

      - name: Copy builds in current folder
        run: |
          mkdir build
          docker cp pki:/usr/share/java/tomcatjss.jar build/

      - name: Remove maven related file
        run: rm -f pom.xml

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.scm.revision=${{ github.event.workflow_run.head_sha }}
            -Dsonar.pullrequest.key=${{ needs.retrieve-pr.outputs.pr-number }}
            -Dsonar.pullrequest.branch=${{ github.event.workflow_run.head_branch }}
            -Dsonar.pullrequest.base=${{ github.event.workflow_run.pull_requests[0].base.ref }}
